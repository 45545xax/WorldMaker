// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

int mapWidth;
int mapHeight;
float blur = 0;
int blurStep;
RWStructuredBuffer<float> sourceHeightMap;
RWStructuredBuffer<float> targetHeightMap;

float diagonalHeight(int index, float thisHeight)
{
    float diagonalHeight = sourceHeightMap[index];
    float actualHeight = (diagonalHeight - thisHeight) / 1.41421356 + thisHeight;
    return actualHeight;
}

[numthreads(32,32,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= (uint)mapWidth || id.y >= (uint)mapHeight)
        return;

    int x = id.x;
    int y = id.y;

    int index = x + y * mapWidth;

    int leftX = x - 1;
    int rightX = x + 1;
    int topY = y - 1;
    int bottomY = y + 1;

    bool isTop = false;
    bool isBottom = false;

    if (leftX < 0) leftX += mapWidth;
    if (rightX >= mapWidth) rightX -= mapWidth;
    if (bottomY >= mapHeight)
    {
        bottomY = mapHeight - 1;
        isBottom = true;
    }
    if (topY < 0)
    {
        topY = 0;
        isTop = true;
    }

    int indexL = leftX + mapWidth * y;
    int indexR = rightX + mapWidth * y;
    int indexU = x + mapWidth * topY;
    int indexD = x + mapWidth * bottomY;
    int indexDL = leftX + mapWidth * bottomY;
    int indexDR = rightX + mapWidth * bottomY;
    int indexUL = leftX + mapWidth * topY;
    int indexUR = rightX + mapWidth * topY;

    float height = sourceHeightMap[index];
    float heightD = sourceHeightMap[indexD];
    float heightR = sourceHeightMap[indexR];
    float heightU = sourceHeightMap[indexU];
    float heightL = sourceHeightMap[indexL];
    float heightDL = diagonalHeight(indexDL, height);
    float heightDR = diagonalHeight(indexDR, height);
    float heightUR = diagonalHeight(indexUR, height);
    float heightUL = diagonalHeight(indexUL, height);

    float squaredBlurStep = pow((2 * blurStep) + 1, 2);
    float squaredPrevBlurStep = pow((2 * (blurStep - 1)) + 1, 2);
    float minBlurWeight = 1.0 / squaredBlurStep;
    float maxBlurWeight = 1.0 / squaredPrevBlurStep;

    float blurWeight = 1 - (blur - floor(blur));

    blurWeight = blurWeight * (maxBlurWeight - minBlurWeight) + minBlurWeight;
    float othersBlurWeight = 1 - blurWeight;

    float numHeights = blurWeight;
    float totalHeight = height * blurWeight;

    float othersNumHeights = 0;
    float othersTotalHeight = 0;
    if (!isTop)
    {
        othersTotalHeight += heightUL + heightU + heightUR;
        othersNumHeights += 3;
    }
    othersTotalHeight += heightL + heightR;
    othersNumHeights += 2;
    if (!isBottom)
    {
        othersTotalHeight += heightDL + heightD + heightDR;
        othersNumHeights += 3;
    }
    othersNumHeights *= othersBlurWeight;
    othersTotalHeight *= othersBlurWeight;

    totalHeight += othersTotalHeight;
    numHeights += othersNumHeights;

    float finalHeight = totalHeight / numHeights;
    targetHeightMap[index] = finalHeight;
}
