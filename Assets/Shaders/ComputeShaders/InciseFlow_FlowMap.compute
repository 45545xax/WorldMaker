#pragma kernel CSMain

int mapWidth;
int mapHeight;
float amount = 1;
RWStructuredBuffer<float> flowMap;
RWStructuredBuffer<int> drainageIndexesMap;

float getFlowFrom(int x, int y, int thisIndex)
{
    if (y < 0) return 0;
    if (y >= mapHeight) return 0;
    if (x >= mapWidth) x -= mapWidth;
    if (x < 0) x += mapWidth;

    int nextIndex = x + y * mapWidth;

    if (drainageIndexesMap[nextIndex] != thisIndex)
        return 0;

    return flowMap[nextIndex];
}

[numthreads(32,32,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= (uint)mapWidth || id.y >= (uint)mapHeight)
        return;

    int x = id.x;
    int y = id.y;
    int index = x + y * mapWidth;

    if (drainageIndexesMap[index] == 0)
        return;

    float inflowAmount = amount >= 1 ? amount : 1;
    inflowAmount += getFlowFrom(x + 1, y, index);
    inflowAmount += getFlowFrom(x, y + 1, index);
    inflowAmount += getFlowFrom(x - 1, y, index);
    inflowAmount += getFlowFrom(x, y - 1, index);
    inflowAmount += getFlowFrom(x + 1, y + 1, index);
    inflowAmount += getFlowFrom(x + 1, y - 1, index);
    inflowAmount += getFlowFrom(x - 1, y + 1, index);
    inflowAmount += getFlowFrom(x - 1, y - 1, index);
    
    flowMap[index] = inflowAmount;
}
